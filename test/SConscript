#-------------------------------------------------------------------------------
# Unit tests
Import('testEnv')
Import('env')
Import('source')
Import('source_objs')
testEnv = testEnv.Clone()
testEnv.AppendUnique(LIBPATH=[env.Dir('../lib')], LIBS=[])
testEnv.PrependENVPath('LD_LIBRARY_PATH', env.Dir('.').abspath)
# We can add single file unit tests very easily.
#testEnv.addUnitTest('test.cpp')
# also, multiple files can be compiled into a single test suite.
#files = Split('''
#        one_test.cpp
#        two_test.cpp
#        ''')
#testEnv.addUnitTest('test_suite', files)
# you can also use glob to add all the files in the folder.

testEnv.Tool ('notmuch_test_db')

test_db = testEnv.NotmuchTestDb ('mail/test_config.template')
testEnv.Alias ('test_db', test_db)
testEnv.Alias ('test', 'test_db')

testEnv.addUnitTest ('test_generic', ['test_generic.cc', source_objs])

composed_files = Glob('test_composed*.cc')
testEnv.addUnitTest ('test_composed', [composed_files, source_objs])

read_convert_files = Glob('test_convert_error*.cc')
testEnv.addUnitTest ('test_convert_error', [read_convert_files, source_objs])

# all the tests added above are automatically added to the 'test' alias
